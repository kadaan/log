<?php

/**
 * @file
 * Log admin pages
 */

/**
 * Page to select log Type to add new log.
 */
function log_add_types_page() {
  $items = array();
  foreach (log_types() as $log_type_key => $log_type) {
    $items[] = l(entity_label('log_type', $log_type), 'log/add/' . $log_type_key);
  }
  return array(
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => t('Select a type of log to create.'),
    ),
  );
}

/**
 * Add new log page callback.
 */
function log_add($type) {
  $log_type = log_types($type);

  $log = entity_create('log', array('type' => $type));
  drupal_set_title(t('Log @name', array('@name' => entity_label('log_type', $log_type))));

  $output = drupal_get_form('log_form', $log);

  return $output;
}

/**
 * Log Form.
 */
function log_form($form, &$form_state, $log) {

  $form['log'] = array(
    '#type' => 'value',
    '#value' => $log,
  );

  // Only display the name field for existing log types.
  // Names for new logs will be generated on save.
  if (!empty($log->id)) {
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#description' => t('Leave this blank to automatically generate a name.'),
      '#default_value' => $log->name,
      '#weight' => -100,
    );
  }

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $log->uid,
  );

  field_attach_form('log', $log, $form, $form_state);

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 100,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save log'),
    '#submit' => $submit + array('log_form_submit'),
  );

  // Show Delete button if allowed.
  $log_id = entity_id('log' ,$log);
  if (!empty($log_id) && log_access('delete', $log)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('log_form_submit_delete'),
    );
  }

  return $form;
}

/**
 * Log validate handler.
 */
function log_form_validate($form, &$form_state) {

}

/**
 * Log submit handler.
 */
function log_form_submit($form, &$form_state) {
  $log = $form_state['values']['log'];

  entity_form_submit_build_entity('log', $log, $form, $form_state);

  log_save($log);

  $log_uri = entity_uri('log', $log);

  $form_state['redirect'] = $log_uri['path'];

  drupal_set_message(t('Log %title saved.', array('%title' => entity_label('log', $log))));
}

function log_form_submit_delete($form, &$form_state) {
  $log = $form_state['values']['log'];
  $log_uri = entity_uri('log', $log);
  $form_state['redirect'] = $log_uri['path'] . '/delete';
}

/**
 * Delete confirmation form.
 */
function log_delete_form($form, &$form_state, $log) {
  $form['log'] = array(
    '#type' => 'value',
    '#value' => $log,
  );
  // Always provide entity id in the same form key as in the entity edit form.
  $form['log_type_id'] = array('#type' => 'value', '#value' => entity_id('log' ,$log));
  $log_uri = entity_uri('log', $log);
  return confirm_form($form,
    t('Are you sure you want to delete log %title?', array('%title' => entity_label('log', $log))),
    $log_uri['path'],
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Delete form submit handler.
 */
function log_delete_form_submit($form, &$form_state) {
  $log = $form_state['values']['log'];
  log_delete($log);

  drupal_set_message(t('Log %title deleted.', array('%title' => entity_label('log', $log))));

  $form_state['redirect'] = '<front>';
}

/**
 * Generates the log type editing form.
 */
function log_type_form($form, &$form_state, $log_type, $op = 'edit') {

  if ($op == 'clone') {
    $log_type->label .= ' (cloned)';
    $log_type->type = '';
  }

  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => $log_type->label,
    '#description' => t('The human-readable name of this log type.'),
    '#required' => TRUE,
    '#size' => 30,
  );

  // Machine-readable type name.
  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => !empty($log_type->type) ? $log_type->type : '',
    '#maxlength' => 32,
    '#disabled' => $log_type->isLocked() && $op != 'clone',
    '#machine_name' => array(
      'exists' => 'log_types',
      'source' => array('label'),
    ),
    '#description' => t('A unique machine-readable name for this log type. It must only contain lowercase letters, numbers, and underscores.'),
  );

  // Name pattern.
  $form['name_pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Name pattern'),
    '#desription' => t('When a log item is first saved, the name will be autogenerated using this pattern. Available tokens are below.'),
    '#default_value' => !empty($log_type->name_pattern) ? $log_type->name_pattern : 'Log [log:id]',
    '#required' => TRUE,
    '#maxlength' => 256,
  );

  if (module_exists('token')) {
    $form['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Prefer raw-text replacements for text to avoid problems with HTML entities!'),
    );
    $form['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('log'),
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save log type'),
    '#weight' => 40,
  );

  if (!$log_type->isLocked() && $op != 'add' && $op != 'clone') {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete log type'),
      '#weight' => 45,
      '#limit_validation_errors' => array(),
      '#submit' => array('log_type_form_submit_delete')
    );
  }
  return $form;
}

/**
 * Submit handler for creating/editing log_type.
 */
function log_type_form_submit(&$form, &$form_state) {
  $log_type = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  log_type_save($log_type);

  // Redirect user back to list of log types.
  $form_state['redirect'] = 'admin/structure/log-types';
}

function log_type_form_submit_delete(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/structure/log-types/' . $form_state['log_type']->type . '/delete';
}

/**
 * Log type delete form.
 */
function log_type_form_delete_confirm($form, &$form_state, $log_type) {
  $form['log_type'] = array(
    '#type' => 'value',
    '#value' => $log_type,
  );
  // Always provide entity id in the same form key as in the entity edit form.
  $form['log_type_id'] = array('#type' => 'value', '#value' => entity_id('log_type' ,$log_type));
  return confirm_form($form,
    t('Are you sure you want to delete log type %title?', array('%title' => entity_label('log_type', $log_type))),
    'log/' . entity_id('log_type' ,$log_type),
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Log type delete form submit handler.
 */
function log_type_form_delete_confirm_submit($form, &$form_state) {
  $log_type = $form_state['values']['log_type'];
  log_type_delete($log_type);

  watchdog('log_type', '@type: deleted %title.', array('@type' => $log_type->type, '%title' => $log_type->label));
  drupal_set_message(t('@type %title has been deleted.', array('@type' => $log_type->type, '%title' => $log_type->label)));

  $form_state['redirect'] = 'admin/structure/log-types';
}
